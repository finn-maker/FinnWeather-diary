{"version":3,"file":"static/js/502.1a20d343.chunk.js","mappings":"ybAMA,MAAMA,EAAiB,CAIrBC,OAAQC,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,4BAA8B,eAClDC,WAAYF,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYG,gCAAkC,+BAC1DC,UAAWJ,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYK,+BAAiC,kBACxDC,cAAeN,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYO,mCAAqC,2BAChEC,kBAAmBR,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYS,wCAA0C,YACzEC,MAAOV,CAAAA,SAAAA,aAAAA,WAAAA,qCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYW,2BAA6B,eAI5CC,GAAMC,EAAAA,EAAAA,IAAcf,GAGbgB,GAAKC,EAAAA,EAAAA,IAAaH,GAGlBI,GAAOC,EAAAA,EAAAA,IAAQL,GAGfM,EAAuBA,IACD,iBAA1BpB,EAAeC,QACc,oBAA7BD,EAAeM,UCNxB,IAAIe,EAA+B,KAG5B,MAAMC,EAAiBA,IACrB,IAAIC,QAAQ,CAACC,EAASC,KACtBL,KAMLM,EAAAA,EAAAA,IAAmBR,EAAMS,UACvB,GAAIC,EACFP,EAAgBO,EAAKC,IAErBC,aAAaC,QAAQ,wBAAyBH,EAAKC,KACnDL,EAAQI,EAAKC,UAEb,IAEE,MAAMG,QAAuBC,EAAAA,EAAAA,IAAkBf,GAC/CG,EAAgBW,EAAeJ,KAAKC,IACpCC,aAAaC,QAAQ,wBAAyBC,EAAeJ,KAAKC,KAClEL,EAAQQ,EAAeJ,KAAKC,IAC9B,CAAE,MAAOK,GACPC,QAAQD,MAAM,wCAAWA,GACzBT,EAAOS,EACT,IArBFT,EAAO,IAAIW,MAAM,iCA4BjBC,EAAYA,KAChB,GAAIhB,EAAe,OAAOA,EAG1B,MAAMiB,EAAeR,aAAaS,QAAQ,yBAC1C,GAAID,EAEF,OADAjB,EAAgBiB,EACTA,EAGT,MAAM,IAAIF,MAAM,mCAILI,EAAiBb,UAC5B,IACE,IAAKP,IACH,MAAM,IAAIgB,MAAM,wEAGlB,MAAMK,EAASJ,IACTK,EAAY,IACbC,EACHF,SACAG,UAAWC,KAAKC,MAChBC,UAAWC,EAAAA,GAAUF,MACrBG,UAAWD,EAAAA,GAAUF,OAGjBI,QAAeC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWpC,EAAI,WAAY0B,GAEjDW,EAAyB,IAC1BV,EACHW,GAAIJ,EAAOI,GACXV,UAAWF,EAAUE,WAIvB,OADAT,QAAQoB,IAAI,oDAAaL,EAAOI,IACzBD,CACT,CAAE,MAAOnB,GAEP,MADAC,QAAQD,MAAM,8CAAYA,GACpBA,CACR,GAqHWsB,EAAmB7B,UAC9B,IACE,IAAKP,IACH,MAAM,IAAIgB,MAAM,8BAIlB,MAAMqB,EAAeC,KAAKC,MAAM7B,aAAaS,QAAQ,0BAA4B,MAG3EqB,OA3HqBjC,WAC7B,IACE,IAAKP,IACH,MAAM,IAAIgB,MAAM,8BAGlB,MAAMK,EAASJ,IACTwB,GAAIC,EAAAA,EAAAA,IACRV,EAAAA,EAAAA,IAAWpC,EAAI,YACf+C,EAAAA,EAAAA,IAAM,SAAU,KAAMtB,IACtBuB,EAAAA,EAAAA,IAAQ,YAAa,SACrBC,EAAAA,EAAAA,IAAM,MAGFC,QAAsBC,EAAAA,EAAAA,IAAQN,GAC9BO,EAAwB,GAe9B,OAbAF,EAAcG,QAASC,IACrB,MAAMC,EAAOD,EAAIC,OACjBH,EAAQI,KAAK,CACXlB,GAAIgB,EAAIhB,GACRmB,MAAOF,EAAKE,MACZC,QAASH,EAAKG,QACdC,KAAMJ,EAAKI,KACXC,QAASL,EAAKK,QACdhC,UAAW2B,EAAK3B,cAIpBT,QAAQoB,IAAI,wCAAUa,EAAQS,6BACvBT,CACT,CAAE,MAAOlC,GAEP,MADAC,QAAQD,MAAM,0DAAcA,GACtBA,CACR,GAyF6B4C,GACrBC,EAAW,IAAIC,IAAIpB,EAAaqB,IAAItC,GAASA,EAAMW,KAEzD,IAAI4B,EAAU,EACVC,EAAS,EAGb,IAAK,MAAMC,KAAc3B,EACvB,IAAKsB,EAASM,IAAID,EAAW9B,IAC3B,UACQd,EAAe,CACnBiC,MAAOW,EAAWX,MAClBC,QAASU,EAAWV,QACpBC,KAAMS,EAAWT,KACjBC,QAASQ,EAAWR,UAEtBM,GACF,CAAE,MAAOhD,GACPC,QAAQD,MAAM,4BAASA,GACvBiD,GACF,CAKJ,OADAhD,QAAQoB,IAAI,0CAAY2B,0BAAiBC,YAClC,CAAED,UAASC,SACpB,CAAE,MAAOjD,GAEP,MADAC,QAAQD,MAAM,0DAAcA,GACtBA,CACR,GAIWoD,EAAuB3D,UAClC,IACE,QAAKP,YAIC+C,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAMV,EAAAA,EAAAA,IAAWpC,EAAI,YAAYiD,EAAAA,EAAAA,IAAM,MAC9C,EACT,CAAE,MAAO/B,GAEP,OADAC,QAAQD,MAAM,oDAAaA,IACpB,CACT,GC/OF,IAAIqD,EAA+B,CACjCC,KAAM,QACNC,gBAAgB,EAChBC,SAAU,KACVC,SAAS,GAIPC,EAAgD,KAG7C,MAAMC,EAA0BlE,UACrC,IAEE,IAAKP,IAGH,OAFAe,QAAQoB,IAAI,iGACZgC,EAAcC,KAAO,QACdD,EAKT,UAD6BD,IAI3B,OAFAnD,QAAQoB,IAAI,2GACZgC,EAAcC,KAAO,QACdD,EAIT,IAUE,aATMjE,IACNiE,EAAcE,gBAAiB,EAC/BF,EAAcC,KAAO,SAErBrD,QAAQoB,IAAI,2GAGNuC,IAECP,CACT,CAAE,MAAOQ,GAGP,OAFA5D,QAAQD,MAAM,4EAAiB6D,GAC/BR,EAAcC,KAAO,QACdD,CACT,CACF,CAAE,MAAOrD,GAGP,OAFAC,QAAQD,MAAM,8CAAYA,GAC1BqD,EAAcC,KAAO,QACdD,CACT,GAIIO,EAAqBnE,UACzB,IAAI4D,EAAcI,QAElB,IACEJ,EAAcI,SAAU,EACxBxD,QAAQoB,IAAI,wDAEZ,MAAMyC,QAAmBxC,IACzB+B,EAAcG,SAAW7C,KAAKC,MAE9BX,QAAQoB,IAAI,iDAAcyC,EAAWd,gCAAiBc,EAAWb,gBACnE,CAAE,MAAOjD,GACPC,QAAQD,MAAM,wCAAWA,EAC3B,CAAC,QACCqD,EAAcI,SAAU,CAC1B,GAuGWM,EAAoBtE,UAC/B,IAAK4D,EAAcE,eACjB,MAAM,IAAIrD,MAAM,8CAGlB,GAAImD,EAAcI,QAChB,MAAM,IAAIvD,MAAM,0DAGlB,IACEmD,EAAcI,SAAU,EACxB,MAAMO,QAAe1C,IAErB,OADA+B,EAAcG,SAAW7C,KAAKC,MACvBoD,CACT,CAAC,QACCX,EAAcI,SAAU,CAC1B,GAIWQ,EAAmBA,KACvB,IAAKZ,IAIDa,EAAoBzE,UAC/B,GAAa,UAAT6D,IAAqBD,EAAcE,eACrC,MAAM,IAAIrD,MAAM,8CAGlBmD,EAAcC,KAAOA,EACrBrD,QAAQoB,IAAI,kEAAgBiC,KAGf,WAATA,GAAqBD,EAAcE,eACrCY,IAEAC,KAKED,EAAqBA,KACrBT,GACFU,IAGF,IACEV,ED1EoCW,KACtC,IACE,IAAKnF,IACH,MAAM,IAAIgB,MAAM,8BAGlB,MAAMK,EAASJ,IACTwB,GAAIC,EAAAA,EAAAA,IACRV,EAAAA,EAAAA,IAAWpC,EAAI,YACf+C,EAAAA,EAAAA,IAAM,SAAU,KAAMtB,IACtBuB,EAAAA,EAAAA,IAAQ,YAAa,SACrBC,EAAAA,EAAAA,IAAM,MAGR,OAAOuC,EAAAA,EAAAA,IAAW3C,EAAIK,IACpB,MAAME,EAAwB,GAC9BF,EAAcG,QAASC,IACrB,MAAMC,EAAOD,EAAIC,OACjBH,EAAQI,KAAK,CACXlB,GAAIgB,EAAIhB,GACRmB,MAAOF,EAAKE,MACZC,QAASH,EAAKG,QACdC,KAAMJ,EAAKI,KACXC,QAASL,EAAKK,QACdhC,UAAW2B,EAAK3B,cAIpBT,QAAQoB,IAAI,oDAAYa,EAAQS,6BAChC0B,EAASnC,IACPlC,IACFC,QAAQD,MAAM,wCAAWA,IAE7B,CAAE,MAAOA,GAEP,OADAC,QAAQD,MAAM,oDAAaA,GACpB,MACT,GCsC6BuE,CAAyB7C,IAClDzB,QAAQoB,IAAI,2FAEZmD,OAAOC,cAAc,IAAIC,YAAY,mBAAoB,CACvDC,OAAQ,CAAEzC,QAASR,QAIvBzB,QAAQoB,IAAI,sEACd,CAAE,MAAOrB,GACPC,QAAQD,MAAM,oDAAaA,EAC7B,GAIIoE,EAAoBA,KACpBV,IACFA,IACAA,EAA2B,KAC3BzD,QAAQoB,IAAI,yEAqBHuD,EAAoBnF,UAC/B,IACEQ,QAAQoB,IAAI,0EAGZ,aAFwB+B,WAGhBhE,IACNiE,EAAcE,gBAAiB,EAC/BF,EAAcC,KAAO,SACrBrD,QAAQoB,IAAI,sDACL,IAEPpB,QAAQoB,IAAI,gDACL,EAEX,CAAE,MAAOrB,GAEP,OADAC,QAAQD,MAAM,8CAAYA,IACnB,CACT,GAUW6E,EAAgB,CAC3BC,MAAO,QACPC,MAAO,QACPC,OAAQ,U,cCjRV,MAmTA,GAnTgEC,IAA0B,IAAzB,gBAAEC,GAAiBD,EAClF,MAAO5B,EAAe8B,IAAoBC,EAAAA,EAAAA,UAASnB,MAC5CR,EAAS4B,IAAcD,EAAAA,EAAAA,WAAS,IAChCE,EAAYC,IAAiBH,EAAAA,EAAAA,WAAS,IACtCI,EAAaC,IAAkBL,EAAAA,EAAAA,UAAgE,OAC/FM,EAAUC,IAAeP,EAAAA,EAAAA,WAAS,GAGnCQ,EAAsBA,KAC1BT,EAAiBlB,MAqCb4B,EAAmBpG,UACvB,UACQyE,EAAkBZ,GACxBsC,IACAH,EAAe,CAAEK,KAAM,UAAWC,QAAS,2BAAOC,EAAa1C,mBAC3D4B,GAAiBA,GACvB,CAAE,MAAOlF,GACPyF,EAAe,CAAEK,KAAM,QAASC,QAAS,yCAAc/F,EAAgB+F,SACzE,GAuBIC,EAAgB1C,IACpB,OAAQA,GACN,IAAK,QAAS,MAAO,2BACrB,IAAK,QAAS,MAAO,2BACrB,IAAK,SAAU,MAAO,2BACtB,QAAS,MAAO,iBAoCpB,OAbA2C,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAWC,YAAYP,EAAqB,KAClD,MAAO,IAAMQ,cAAcF,IAC1B,KAGHD,EAAAA,EAAAA,WAAU,KACR,GAAIT,EAAa,CACf,MAAMa,EAAQC,WAAW,IAAMb,EAAe,MAAO,KACrD,MAAO,IAAMc,aAAaF,EAC5B,GACC,CAACb,KAGFgB,EAAAA,GAAAA,MAACC,EAAAA,EAAI,CAACC,UAAW,EAAGC,GAAI,CAAEC,GAAI,GAAIC,SAAA,EAChCL,EAAAA,GAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,EAEVL,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,gBAAgBN,GAAI,EAAEC,SAAA,EAC3EL,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAEN,SAAA,CA5BjDxD,EAAcE,gBAAyC,WAAvBF,EAAcC,MACzC8D,EAAAA,GAAAA,KAACC,EAAAA,EAAK,CAACC,KAAM,KAEK,UAAvBjE,EAAcC,MACT8D,EAAAA,GAAAA,KAACG,EAAAA,EAAQ,CAACD,KAAM,MAElBF,EAAAA,GAAAA,KAACI,EAAAA,EAAQ,CAACF,KAAM,MAwBfF,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAW,OAAMd,SAAC,8BAG3CO,EAAAA,GAAAA,KAACQ,EAAAA,EAAI,CACHC,MAAO7B,EAAa3C,EAAcC,MAClCwE,MA1CNzE,EAAcE,gBAAyC,WAAvBF,EAAcC,KAA0B,UACjD,UAAvBD,EAAcC,KAAyB,UACpC,QAyCGgE,KAAK,cAITd,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAEN,SAAA,CAC5CxD,EAAcI,UAAW2D,EAAAA,GAAAA,KAACW,EAAAA,EAAc,CAACpB,GAAI,CAAEqB,MAAO,QACvDZ,EAAAA,GAAAA,KAACa,EAAAA,EAAU,CAACX,KAAK,QAAQY,QAASA,IAAM3C,GAAc,GAAMsB,UAC1DO,EAAAA,GAAAA,KAACe,EAAAA,EAAQ,CAACb,KAAM,cAMtBF,EAAAA,GAAAA,KAACL,EAAAA,EAAG,CAACH,GAAI,EAAEC,UACTO,EAAAA,GAAAA,KAACgB,EAAAA,EAAK,CACJC,SAAUnJ,IAAyB,OAAS,UAC5CyH,GAAI,CAAE2B,SAAU,YAAazB,SAE5B3H,KACCsH,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAEN,SAAA,EAC7CO,EAAAA,GAAAA,KAACmB,EAAAA,EAAW,CAACjB,KAAM,KAAM,2EAI3Bd,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAEN,SAAA,EAC7CO,EAAAA,GAAAA,KAACoB,EAAAA,EAAW,CAAClB,KAAM,KAAM,qFAQjCd,EAAAA,GAAAA,MAACiC,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,SAAS,OAAOC,YAAU,EAAAhC,SAAA,EACzD3H,MACAkI,EAAAA,GAAAA,KAACgB,EAAAA,EAAK,CAACC,SAAS,OAAO1B,GAAI,CAAEqB,MAAO,OAAQM,SAAU,UAAWzB,SAAC,6JAKnE3H,MAA2BmE,EAAcE,iBACxC6D,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CACLpB,QAAQ,YACRqB,WAAW3B,EAAAA,GAAAA,KAACC,EAAAA,EAAK,CAACC,KAAM,KACxBY,QAlKkBzI,UAC5B4F,GAAW,GACX,UACQ1B,IACNiC,IACAH,EAAe,CAAEK,KAAM,UAAWC,QAAS,qDACvCb,GAAiBA,GACvB,CAAE,MAAOlF,GACPyF,EAAe,CAAEK,KAAM,QAASC,QAAS,mCAAa/F,EAAgB+F,SACxE,CAAC,QACCV,GAAW,EACb,GAwJU2D,SAAUvF,EACV6D,KAAK,QAAOT,SACb,yCAKFxD,EAAcE,iBACbiD,EAAAA,GAAAA,MAAAyC,GAAAA,SAAA,CAAApC,SAAA,EACEO,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CACLpB,QAAQ,WACRqB,WAAW3B,EAAAA,GAAAA,KAAC8B,EAAAA,EAAS,CAAC5B,KAAM,KAC5BY,QAhKWzI,UACvB4F,GAAW,GACX,IACE,MAAMrB,QAAeD,IACrB0B,EAAe,CACbK,KAAM,UACNC,QAAS,0CAAY/B,EAAOhB,gCAAiBgB,EAAOf,kBAEtD2C,IACIV,GAAiBA,GACvB,CAAE,MAAOlF,GACPyF,EAAe,CAAEK,KAAM,QAASC,QAAS,6BAAY/F,EAAgB+F,SACvE,CAAC,QACCV,GAAW,EACb,GAmJY2D,SAAUvF,EACV6D,KAAK,QAAOT,SACb,6BAIuB,UAAvBxD,EAAcC,OACb8D,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CACLpB,QAAQ,YACRqB,WAAW3B,EAAAA,GAAAA,KAACC,EAAAA,EAAK,CAACC,KAAM,KACxBY,QAASA,IAAMrC,EAAiBhB,EAAcG,QAC9CsC,KAAK,QAAOT,SACb,mDAOLxD,EAAcE,gBAAkBrE,MAChCkI,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CACLpB,QAAQ,WACRqB,WAAW3B,EAAAA,GAAAA,KAAC+B,EAAAA,EAAI,CAAC7B,KAAM,KACvBY,QA1JYzI,UACtB4F,GAAW,GACX,UACwBT,KAEpBgB,IACAH,EAAe,CAAEK,KAAM,UAAWC,QAAS,+CACvCb,GAAiBA,KAErBO,EAAe,CAAEK,KAAM,QAASC,QAAS,wCAE7C,CAAE,MAAO/F,GACPyF,EAAe,CAAEK,KAAM,QAASC,QAAS,6BAAY/F,EAAgB+F,SACvE,CAAC,QACCV,GAAW,EACb,GA4IU2D,SAAUvF,EACV6D,KAAK,QAAOT,SACb,gCAOJxD,EAAcG,WACbgD,EAAAA,GAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,UAAUI,MAAM,iBAAiBnB,GAAI,CAAEyC,GAAI,EAAGpC,QAAS,SAAUH,SAAA,CAAC,6BAC7E,IAAIlG,KAAK0C,EAAcG,UAAU6F,oBAK3C7D,IACC4B,EAAAA,GAAAA,KAACgB,EAAAA,EAAK,CACJC,SAAU7C,EAAYM,KACtBa,GAAI,CAAEyC,GAAI,GACVE,QAASA,IAAM7D,EAAe,MAAMoB,SAEnCrB,EAAYO,cAMnBS,EAAAA,GAAAA,MAAC+C,EAAAA,EAAM,CAACC,KAAMlE,EAAYgE,QAASA,IAAM/D,GAAc,GAAQkE,SAAS,KAAKC,WAAS,EAAA7C,SAAA,EACpFO,EAAAA,GAAAA,KAACuC,EAAAA,EAAW,CAAA9C,SAAC,0CACbO,EAAAA,GAAAA,KAACwC,EAAAA,EAAa,CAAA/C,UACZL,EAAAA,GAAAA,MAACiC,EAAAA,EAAK,CAACE,QAAS,EAAGhC,GAAI,CAAEkD,GAAI,GAAIhD,SAAA,EAE/BL,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAAAF,SAAA,EACFO,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,YAAYoC,cAAY,EAAAjD,SAAC,8BAC7CO,EAAAA,GAAAA,KAACqB,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAE9B,SAC/BkD,OAAOC,OAAOnF,GAAe9B,IAAKO,IACjC8D,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CAELpB,QAASrE,EAAcC,OAASA,EAAO,YAAc,WACrD4E,QAASA,IAAMrC,EAAiBvC,GAChC0F,SAAmB,UAAT1F,IAAqBD,EAAcE,eAC7C+D,KAAK,QAAOT,SAEXb,EAAa1C,IANTA,UAYb8D,EAAAA,GAAAA,KAAC6C,EAAAA,EAAO,KAGR7C,EAAAA,GAAAA,KAAC8C,EAAAA,EAAgB,CACfC,SACE/C,EAAAA,GAAAA,KAACgD,EAAAA,EAAM,CACLC,QAAS3E,EACT4E,SAAWC,GAAM5E,EAAY4E,EAAEC,OAAOH,WAG1CxC,MAAM,oDAIRrB,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAAAF,SAAA,EACFO,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,YAAYoC,cAAY,EAAAjD,SAAC,8BAC7CL,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAGP,GAAI,EAAEC,SAAA,EACpDO,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAC,mBAC5BO,EAAAA,GAAAA,KAACQ,EAAAA,EAAI,CAACC,MAAO7B,EAAa3C,EAAcC,MAAOgE,KAAK,cAEtDd,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAGP,GAAI,EAAEC,SAAA,EACpDO,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAC,8BAC3BxD,EAAcE,gBACb6D,EAAAA,GAAAA,KAACmB,EAAAA,EAAW,CAACjB,KAAM,GAAIQ,MAAM,WAC7BV,EAAAA,GAAAA,KAACI,EAAAA,EAAQ,CAACF,KAAM,GAAIQ,MAAM,YAG7BzE,EAAcI,UACb+C,EAAAA,GAAAA,MAACO,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASE,IAAK,EAAEN,SAAA,EAC7CO,EAAAA,GAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAC,iCAC5BO,EAAAA,GAAAA,KAACW,EAAAA,EAAc,CAACpB,GAAI,CAAEqB,MAAO,mBAMvCZ,EAAAA,GAAAA,KAACqD,EAAAA,EAAa,CAAA5D,UACZO,EAAAA,GAAAA,KAAC0B,EAAAA,EAAM,CAACZ,QAASA,IAAM3C,GAAc,GAAOsB,SAAC,yB","sources":["services/firebaseConfig.ts","services/cloudDiaryService.ts","services/hybridDiaryService.ts","components/CloudStorageManager.tsx"],"sourcesContent":["// Firebase配置文件\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\n// Firebase配置 - 你需要从Firebase控制台获取这些值\r\nconst firebaseConfig = {\r\n  // 从Firebase控制台获取配置信息\r\n  // 访问 https://console.firebase.google.com/\r\n  // 创建项目后在项目设置中找到这些配置\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY || \"your-api-key\",\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN || \"your-project.firebaseapp.com\",\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID || \"your-project-id\",\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET || \"your-project.appspot.com\",\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID || \"your-app-id\"\r\n};\r\n\r\n// 初始化Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// 初始化Firestore数据库\r\nexport const db = getFirestore(app);\r\n\r\n// 初始化身份验证\r\nexport const auth = getAuth(app);\r\n\r\n// 检查Firebase是否已正确配置\r\nexport const isFirebaseConfigured = (): boolean => {\r\n  return firebaseConfig.apiKey !== \"your-api-key\" && \r\n         firebaseConfig.projectId !== \"your-project-id\";\r\n};\r\n\r\nexport default app; ","// 云端日记存储服务\r\nimport { \r\n  collection, \r\n  addDoc, \r\n  getDocs, \r\n  query, \r\n  orderBy, \r\n  limit,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  where,\r\n  onSnapshot,\r\n  Timestamp\r\n} from 'firebase/firestore';\r\nimport { \r\n  signInAnonymously, \r\n  onAuthStateChanged,\r\n  User \r\n} from 'firebase/auth';\r\nimport { db, auth, isFirebaseConfigured } from './firebaseConfig';\r\nimport { DiaryEntry } from '../types';\r\n\r\n// 用户ID存储\r\nlet currentUserId: string | null = null;\r\n\r\n// 初始化匿名用户认证\r\nexport const initializeAuth = (): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!isFirebaseConfigured()) {\r\n      reject(new Error('Firebase未配置'));\r\n      return;\r\n    }\r\n\r\n    // 检查是否已有用户\r\n    onAuthStateChanged(auth, async (user: User | null) => {\r\n      if (user) {\r\n        currentUserId = user.uid;\r\n        // 保存用户ID到localStorage以便离线使用\r\n        localStorage.setItem('weather_diary_user_id', user.uid);\r\n        resolve(user.uid);\r\n      } else {\r\n        try {\r\n          // 匿名登录\r\n          const userCredential = await signInAnonymously(auth);\r\n          currentUserId = userCredential.user.uid;\r\n          localStorage.setItem('weather_diary_user_id', userCredential.user.uid);\r\n          resolve(userCredential.user.uid);\r\n        } catch (error) {\r\n          console.error('匿名登录失败:', error);\r\n          reject(error);\r\n        }\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// 获取用户ID\r\nconst getUserId = (): string => {\r\n  if (currentUserId) return currentUserId;\r\n  \r\n  // 从localStorage获取\r\n  const storedUserId = localStorage.getItem('weather_diary_user_id');\r\n  if (storedUserId) {\r\n    currentUserId = storedUserId;\r\n    return storedUserId;\r\n  }\r\n  \r\n  throw new Error('用户未登录');\r\n};\r\n\r\n// 保存日记到云端\r\nexport const saveCloudDiary = async (entry: Omit<DiaryEntry, 'id' | 'timestamp'>): Promise<DiaryEntry> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置，使用本地存储');\r\n    }\r\n\r\n    const userId = getUserId();\r\n    const diaryData = {\r\n      ...entry,\r\n      userId,\r\n      timestamp: Date.now(),\r\n      createdAt: Timestamp.now(),\r\n      updatedAt: Timestamp.now()\r\n    };\r\n\r\n    const docRef = await addDoc(collection(db, 'diaries'), diaryData);\r\n    \r\n    const savedEntry: DiaryEntry = {\r\n      ...entry,\r\n      id: docRef.id,\r\n      timestamp: diaryData.timestamp\r\n    };\r\n\r\n    console.log('日记已保存到云端:', docRef.id);\r\n    return savedEntry;\r\n  } catch (error) {\r\n    console.error('保存到云端失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 从云端获取日记列表\r\nexport const getCloudDiaries = async (): Promise<DiaryEntry[]> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置');\r\n    }\r\n\r\n    const userId = getUserId();\r\n    const q = query(\r\n      collection(db, 'diaries'),\r\n      where('userId', '==', userId),\r\n      orderBy('timestamp', 'desc'),\r\n      limit(100)\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const entries: DiaryEntry[] = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      entries.push({\r\n        id: doc.id,\r\n        title: data.title,\r\n        content: data.content,\r\n        mood: data.mood,\r\n        weather: data.weather,\r\n        timestamp: data.timestamp\r\n      });\r\n    });\r\n\r\n    console.log(`从云端获取到 ${entries.length} 条日记`);\r\n    return entries;\r\n  } catch (error) {\r\n    console.error('从云端获取日记失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 更新云端日记\r\nexport const updateCloudDiary = async (id: string, updates: Partial<DiaryEntry>): Promise<void> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置');\r\n    }\r\n\r\n    const docRef = doc(db, 'diaries', id);\r\n    await updateDoc(docRef, {\r\n      ...updates,\r\n      updatedAt: Timestamp.now()\r\n    });\r\n\r\n    console.log('日记已更新:', id);\r\n  } catch (error) {\r\n    console.error('更新云端日记失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 删除云端日记\r\nexport const deleteCloudDiary = async (id: string): Promise<void> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置');\r\n    }\r\n\r\n    await deleteDoc(doc(db, 'diaries', id));\r\n    console.log('日记已删除:', id);\r\n  } catch (error) {\r\n    console.error('删除云端日记失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 实时监听云端数据变化\r\nexport const subscribeToCloudDiaries = (callback: (entries: DiaryEntry[]) => void): (() => void) => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置');\r\n    }\r\n\r\n    const userId = getUserId();\r\n    const q = query(\r\n      collection(db, 'diaries'),\r\n      where('userId', '==', userId),\r\n      orderBy('timestamp', 'desc'),\r\n      limit(100)\r\n    );\r\n\r\n    return onSnapshot(q, (querySnapshot) => {\r\n      const entries: DiaryEntry[] = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        entries.push({\r\n          id: doc.id,\r\n          title: data.title,\r\n          content: data.content,\r\n          mood: data.mood,\r\n          weather: data.weather,\r\n          timestamp: data.timestamp\r\n        });\r\n      });\r\n      \r\n      console.log(`实时更新：获取到 ${entries.length} 条日记`);\r\n      callback(entries);\r\n    }, (error) => {\r\n      console.error('实时监听失败:', error);\r\n    });\r\n  } catch (error) {\r\n    console.error('订阅云端数据失败:', error);\r\n    return () => {}; // 返回空的取消订阅函数\r\n  }\r\n};\r\n\r\n// 同步本地数据到云端\r\nexport const syncLocalToCloud = async (): Promise<{ success: number; failed: number }> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      throw new Error('Firebase未配置');\r\n    }\r\n\r\n    // 获取本地数据\r\n    const localEntries = JSON.parse(localStorage.getItem('weather_diary_entries') || '[]');\r\n    \r\n    // 获取云端数据\r\n    const cloudEntries = await getCloudDiaries();\r\n    const cloudIds = new Set(cloudEntries.map(entry => entry.id));\r\n\r\n    let success = 0;\r\n    let failed = 0;\r\n\r\n    // 上传本地独有的数据\r\n    for (const localEntry of localEntries) {\r\n      if (!cloudIds.has(localEntry.id)) {\r\n        try {\r\n          await saveCloudDiary({\r\n            title: localEntry.title,\r\n            content: localEntry.content,\r\n            mood: localEntry.mood,\r\n            weather: localEntry.weather\r\n          });\r\n          success++;\r\n        } catch (error) {\r\n          console.error('同步失败:', error);\r\n          failed++;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(`同步完成: 成功 ${success} 条, 失败 ${failed} 条`);\r\n    return { success, failed };\r\n  } catch (error) {\r\n    console.error('同步本地到云端失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 检查云端连接状态\r\nexport const checkCloudConnection = async (): Promise<boolean> => {\r\n  try {\r\n    if (!isFirebaseConfigured()) {\r\n      return false;\r\n    }\r\n\r\n    await getDocs(query(collection(db, 'diaries'), limit(1)));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('云端连接检查失败:', error);\r\n    return false;\r\n  }\r\n}; ","// 混合存储服务 - 同时支持本地和云端存储\r\nimport { DiaryEntry } from '../types';\r\nimport { \r\n  saveDiaryEntry as saveLocalDiary,\r\n  getDiaryEntries as getLocalDiaries,\r\n  deleteDiaryEntry as deleteLocalDiary,\r\n  updateDiaryEntry as updateLocalDiary\r\n} from './diaryService';\r\nimport { \r\n  saveCloudDiary,\r\n  getCloudDiaries,\r\n  deleteCloudDiary,\r\n  updateCloudDiary,\r\n  initializeAuth,\r\n  syncLocalToCloud,\r\n  checkCloudConnection,\r\n  subscribeToCloudDiaries\r\n} from './cloudDiaryService';\r\nimport { isFirebaseConfigured } from './firebaseConfig';\r\n\r\n// 存储模式\r\nexport type StorageMode = 'local' | 'cloud' | 'hybrid';\r\n\r\n// 存储状态\r\ninterface StorageStatus {\r\n  mode: StorageMode;\r\n  cloudAvailable: boolean;\r\n  lastSync: number | null;\r\n  syncing: boolean;\r\n}\r\n\r\n// 全局存储状态\r\nlet storageStatus: StorageStatus = {\r\n  mode: 'local',\r\n  cloudAvailable: false,\r\n  lastSync: null,\r\n  syncing: false\r\n};\r\n\r\n// 云端数据监听取消函数\r\nlet unsubscribeCloudListener: (() => void) | null = null;\r\n\r\n// 初始化混合存储\r\nexport const initializeHybridStorage = async (): Promise<StorageStatus> => {\r\n  try {\r\n    // 检查Firebase配置\r\n    if (!isFirebaseConfigured()) {\r\n      console.log('📱 Firebase未配置，使用本地存储模式');\r\n      storageStatus.mode = 'local';\r\n      return storageStatus;\r\n    }\r\n\r\n    // 检查网络连接\r\n    const cloudConnected = await checkCloudConnection();\r\n    if (!cloudConnected) {\r\n      console.log('🔌 云端连接失败，使用本地存储模式');\r\n      storageStatus.mode = 'local';\r\n      return storageStatus;\r\n    }\r\n\r\n    // 初始化用户认证\r\n    try {\r\n      await initializeAuth();\r\n      storageStatus.cloudAvailable = true;\r\n      storageStatus.mode = 'hybrid';\r\n      \r\n      console.log('☁️ 云端存储已启用，使用混合模式');\r\n      \r\n      // 启动数据同步\r\n      await performInitialSync();\r\n      \r\n      return storageStatus;\r\n    } catch (authError) {\r\n      console.error('认证失败，降级到本地模式:', authError);\r\n      storageStatus.mode = 'local';\r\n      return storageStatus;\r\n    }\r\n  } catch (error) {\r\n    console.error('初始化存储失败:', error);\r\n    storageStatus.mode = 'local';\r\n    return storageStatus;\r\n  }\r\n};\r\n\r\n// 执行初始同步\r\nconst performInitialSync = async (): Promise<void> => {\r\n  if (storageStatus.syncing) return;\r\n  \r\n  try {\r\n    storageStatus.syncing = true;\r\n    console.log('🔄 开始初始同步...');\r\n    \r\n    const syncResult = await syncLocalToCloud();\r\n    storageStatus.lastSync = Date.now();\r\n    \r\n    console.log(`✅ 同步完成: 成功 ${syncResult.success} 条, 失败 ${syncResult.failed} 条`);\r\n  } catch (error) {\r\n    console.error('初始同步失败:', error);\r\n  } finally {\r\n    storageStatus.syncing = false;\r\n  }\r\n};\r\n\r\n// 保存日记 (混合模式)\r\nexport const saveHybridDiary = async (entry: Omit<DiaryEntry, 'id' | 'timestamp'>): Promise<DiaryEntry> => {\r\n  // 始终先保存到本地\r\n  const localEntry = saveLocalDiary(entry);\r\n  \r\n  // 如果云端可用，尝试保存到云端\r\n  if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') {\r\n    try {\r\n      const cloudEntry = await saveCloudDiary(entry);\r\n      console.log('✅ 日记已同时保存到本地和云端');\r\n      return cloudEntry; // 返回云端ID\r\n    } catch (error) {\r\n      console.warn('⚠️ 云端保存失败，仅保存到本地:', error);\r\n      // 降级到本地模式\r\n      storageStatus.cloudAvailable = false;\r\n      return localEntry;\r\n    }\r\n  }\r\n  \r\n  return localEntry;\r\n};\r\n\r\n// 获取日记列表 (混合模式)\r\nexport const getHybridDiaries = async (): Promise<DiaryEntry[]> => {\r\n  // 如果云端可用，优先从云端获取\r\n  if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') {\r\n    try {\r\n      const cloudEntries = await getCloudDiaries();\r\n      \r\n      // 同时获取本地数据进行合并\r\n      const localEntries = getLocalDiaries();\r\n      \r\n      // 合并数据（云端优先，去重）\r\n      const mergedEntries = mergeEntries(cloudEntries, localEntries);\r\n      \r\n      console.log(`📊 获取数据: 云端 ${cloudEntries.length} 条, 本地 ${localEntries.length} 条, 合并后 ${mergedEntries.length} 条`);\r\n      return mergedEntries;\r\n    } catch (error) {\r\n      console.warn('⚠️ 云端获取失败，降级到本地:', error);\r\n      storageStatus.cloudAvailable = false;\r\n    }\r\n  }\r\n  \r\n  // 从本地获取\r\n  return getLocalDiaries();\r\n};\r\n\r\n// 删除日记 (混合模式)\r\nexport const deleteHybridDiary = async (id: string): Promise<void> => {\r\n  // 先从本地删除\r\n  deleteLocalDiary(id);\r\n  \r\n  // 如果云端可用，尝试从云端删除\r\n  if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') {\r\n    try {\r\n      await deleteCloudDiary(id);\r\n      console.log('✅ 日记已从本地和云端删除');\r\n    } catch (error) {\r\n      console.warn('⚠️ 云端删除失败:', error);\r\n    }\r\n  }\r\n};\r\n\r\n// 更新日记 (混合模式)\r\nexport const updateHybridDiary = async (id: string, updates: Partial<DiaryEntry>): Promise<DiaryEntry | null> => {\r\n  // 先更新本地\r\n  const localResult = updateLocalDiary(id, updates);\r\n  \r\n  // 如果云端可用，尝试更新云端\r\n  if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') {\r\n    try {\r\n      await updateCloudDiary(id, updates);\r\n      console.log('✅ 日记已在本地和云端更新');\r\n    } catch (error) {\r\n      console.warn('⚠️ 云端更新失败:', error);\r\n    }\r\n  }\r\n  \r\n  return localResult;\r\n};\r\n\r\n// 合并本地和云端数据\r\nconst mergeEntries = (cloudEntries: DiaryEntry[], localEntries: DiaryEntry[]): DiaryEntry[] => {\r\n  const entryMap = new Map<string, DiaryEntry>();\r\n  \r\n  // 先加入本地数据\r\n  localEntries.forEach(entry => {\r\n    entryMap.set(entry.id, entry);\r\n  });\r\n  \r\n  // 云端数据覆盖本地数据（云端优先）\r\n  cloudEntries.forEach(entry => {\r\n    entryMap.set(entry.id, entry);\r\n  });\r\n  \r\n  // 按时间戳排序\r\n  return Array.from(entryMap.values()).sort((a, b) => b.timestamp - a.timestamp);\r\n};\r\n\r\n// 手动同步到云端\r\nexport const manualSyncToCloud = async (): Promise<{ success: number; failed: number }> => {\r\n  if (!storageStatus.cloudAvailable) {\r\n    throw new Error('云端存储不可用');\r\n  }\r\n  \r\n  if (storageStatus.syncing) {\r\n    throw new Error('正在同步中，请稍候');\r\n  }\r\n  \r\n  try {\r\n    storageStatus.syncing = true;\r\n    const result = await syncLocalToCloud();\r\n    storageStatus.lastSync = Date.now();\r\n    return result;\r\n  } finally {\r\n    storageStatus.syncing = false;\r\n  }\r\n};\r\n\r\n// 获取存储状态\r\nexport const getStorageStatus = (): StorageStatus => {\r\n  return { ...storageStatus };\r\n};\r\n\r\n// 切换存储模式\r\nexport const switchStorageMode = async (mode: StorageMode): Promise<void> => {\r\n  if (mode === 'cloud' && !storageStatus.cloudAvailable) {\r\n    throw new Error('云端存储不可用');\r\n  }\r\n  \r\n  storageStatus.mode = mode;\r\n  console.log(`📝 存储模式已切换到: ${mode}`);\r\n  \r\n  // 如果切换到混合模式，启动实时监听\r\n  if (mode === 'hybrid' && storageStatus.cloudAvailable) {\r\n    startCloudListener();\r\n  } else {\r\n    stopCloudListener();\r\n  }\r\n};\r\n\r\n// 启动云端数据监听\r\nconst startCloudListener = (): void => {\r\n  if (unsubscribeCloudListener) {\r\n    stopCloudListener();\r\n  }\r\n  \r\n  try {\r\n    unsubscribeCloudListener = subscribeToCloudDiaries((cloudEntries) => {\r\n      console.log('🔄 云端数据已更新，触发UI刷新');\r\n      // 这里可以通过事件系统通知UI组件更新\r\n      window.dispatchEvent(new CustomEvent('cloudDataUpdated', { \r\n        detail: { entries: cloudEntries } \r\n      }));\r\n    });\r\n    \r\n    console.log('👀 云端数据监听已启动');\r\n  } catch (error) {\r\n    console.error('启动云端监听失败:', error);\r\n  }\r\n};\r\n\r\n// 停止云端数据监听\r\nconst stopCloudListener = (): void => {\r\n  if (unsubscribeCloudListener) {\r\n    unsubscribeCloudListener();\r\n    unsubscribeCloudListener = null;\r\n    console.log('👀 云端数据监听已停止');\r\n  }\r\n};\r\n\r\n// 检查是否需要同步\r\nexport const shouldSync = (): boolean => {\r\n  if (!storageStatus.cloudAvailable || storageStatus.mode === 'local') {\r\n    return false;\r\n  }\r\n  \r\n  // 如果从未同步过，需要同步\r\n  if (!storageStatus.lastSync) {\r\n    return true;\r\n  }\r\n  \r\n  // 如果超过5分钟未同步，需要同步\r\n  const fiveMinutes = 5 * 60 * 1000;\r\n  return (Date.now() - storageStatus.lastSync) > fiveMinutes;\r\n};\r\n\r\n// 强制重新初始化云端连接\r\nexport const reinitializeCloud = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('🔄 重新初始化云端连接...');\r\n    const connected = await checkCloudConnection();\r\n    \r\n    if (connected) {\r\n      await initializeAuth();\r\n      storageStatus.cloudAvailable = true;\r\n      storageStatus.mode = 'hybrid';\r\n      console.log('✅ 云端连接已恢复');\r\n      return true;\r\n    } else {\r\n      console.log('❌ 云端连接失败');\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('重新初始化失败:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 清理资源\r\nexport const cleanupHybridStorage = (): void => {\r\n  stopCloudListener();\r\n  console.log('🧹 混合存储资源已清理');\r\n};\r\n\r\n// 导出存储状态常量\r\nexport const STORAGE_MODES = {\r\n  LOCAL: 'local' as StorageMode,\r\n  CLOUD: 'cloud' as StorageMode,\r\n  HYBRID: 'hybrid' as StorageMode\r\n} as const; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Chip,\r\n  LinearProgress,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Switch,\r\n  FormControlLabel,\r\n  Stack,\r\n  Divider,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport { \r\n  Cloud, \r\n  CloudOff, \r\n  RefreshCw, \r\n  Settings, \r\n  CheckCircle,\r\n  AlertCircle,\r\n  Wifi,\r\n  WifiOff,\r\n  Database,\r\n  Server\r\n} from 'lucide-react';\r\nimport { \r\n  getStorageStatus, \r\n  initializeHybridStorage,\r\n  manualSyncToCloud,\r\n  switchStorageMode,\r\n  reinitializeCloud,\r\n  StorageMode,\r\n  STORAGE_MODES\r\n} from '../services/hybridDiaryService';\r\nimport { isFirebaseConfigured } from '../services/firebaseConfig';\r\n\r\ninterface CloudStorageManagerProps {\r\n  onStorageChange?: () => void;\r\n}\r\n\r\nconst CloudStorageManager: React.FC<CloudStorageManagerProps> = ({ onStorageChange }) => {\r\n  const [storageStatus, setStorageStatus] = useState(getStorageStatus());\r\n  const [syncing, setSyncing] = useState(false);\r\n  const [showConfig, setShowConfig] = useState(false);\r\n  const [syncMessage, setSyncMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);\r\n  const [autoSync, setAutoSync] = useState(true);\r\n\r\n  // 更新存储状态\r\n  const updateStorageStatus = () => {\r\n    setStorageStatus(getStorageStatus());\r\n  };\r\n\r\n  // 初始化云端存储\r\n  const handleInitializeCloud = async () => {\r\n    setSyncing(true);\r\n    try {\r\n      await initializeHybridStorage();\r\n      updateStorageStatus();\r\n      setSyncMessage({ type: 'success', message: '云端存储已初始化' });\r\n      if (onStorageChange) onStorageChange();\r\n    } catch (error) {\r\n      setSyncMessage({ type: 'error', message: '初始化失败: ' + (error as Error).message });\r\n    } finally {\r\n      setSyncing(false);\r\n    }\r\n  };\r\n\r\n  // 手动同步\r\n  const handleManualSync = async () => {\r\n    setSyncing(true);\r\n    try {\r\n      const result = await manualSyncToCloud();\r\n      setSyncMessage({ \r\n        type: 'success', \r\n        message: `同步完成: 成功 ${result.success} 条, 失败 ${result.failed} 条` \r\n      });\r\n      updateStorageStatus();\r\n      if (onStorageChange) onStorageChange();\r\n    } catch (error) {\r\n      setSyncMessage({ type: 'error', message: '同步失败: ' + (error as Error).message });\r\n    } finally {\r\n      setSyncing(false);\r\n    }\r\n  };\r\n\r\n  // 切换存储模式\r\n  const handleModeSwitch = async (mode: StorageMode) => {\r\n    try {\r\n      await switchStorageMode(mode);\r\n      updateStorageStatus();\r\n      setSyncMessage({ type: 'success', message: `已切换到${getModeLabel(mode)}模式` });\r\n      if (onStorageChange) onStorageChange();\r\n    } catch (error) {\r\n      setSyncMessage({ type: 'error', message: '切换模式失败: ' + (error as Error).message });\r\n    }\r\n  };\r\n\r\n  // 重新连接云端\r\n  const handleReconnect = async () => {\r\n    setSyncing(true);\r\n    try {\r\n      const success = await reinitializeCloud();\r\n      if (success) {\r\n        updateStorageStatus();\r\n        setSyncMessage({ type: 'success', message: '云端连接已恢复' });\r\n        if (onStorageChange) onStorageChange();\r\n      } else {\r\n        setSyncMessage({ type: 'error', message: '云端连接失败' });\r\n      }\r\n    } catch (error) {\r\n      setSyncMessage({ type: 'error', message: '重连失败: ' + (error as Error).message });\r\n    } finally {\r\n      setSyncing(false);\r\n    }\r\n  };\r\n\r\n  // 获取模式标签\r\n  const getModeLabel = (mode: StorageMode): string => {\r\n    switch (mode) {\r\n      case 'local': return '本地存储';\r\n      case 'cloud': return '云端存储';\r\n      case 'hybrid': return '混合存储';\r\n      default: return '未知';\r\n    }\r\n  };\r\n\r\n  // 获取状态颜色\r\n  const getStatusColor = () => {\r\n    if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') return 'success';\r\n    if (storageStatus.mode === 'local') return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  // 获取状态图标\r\n  const getStatusIcon = () => {\r\n    if (storageStatus.cloudAvailable && storageStatus.mode === 'hybrid') {\r\n      return <Cloud size={20} />;\r\n    }\r\n    if (storageStatus.mode === 'local') {\r\n      return <Database size={20} />;\r\n    }\r\n    return <CloudOff size={20} />;\r\n  };\r\n\r\n  // 定期更新状态\r\n  useEffect(() => {\r\n    const interval = setInterval(updateStorageStatus, 30000); // 30秒更新一次\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // 自动隐藏消息\r\n  useEffect(() => {\r\n    if (syncMessage) {\r\n      const timer = setTimeout(() => setSyncMessage(null), 5000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [syncMessage]);\r\n\r\n  return (\r\n    <Card elevation={2} sx={{ mb: 2 }}>\r\n      <CardContent>\r\n        {/* 存储状态显示 */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            {getStatusIcon()}\r\n            <Typography variant=\"h6\" fontWeight=\"bold\">\r\n              云端存储\r\n            </Typography>\r\n            <Chip \r\n              label={getModeLabel(storageStatus.mode)}\r\n              color={getStatusColor()}\r\n              size=\"small\"\r\n            />\r\n          </Box>\r\n          \r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            {storageStatus.syncing && <LinearProgress sx={{ width: 100 }} />}\r\n            <IconButton size=\"small\" onClick={() => setShowConfig(true)}>\r\n              <Settings size={16} />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Firebase配置状态 */}\r\n        <Box mb={2}>\r\n          <Alert \r\n            severity={isFirebaseConfigured() ? 'info' : 'warning'} \r\n            sx={{ fontSize: '0.875rem' }}\r\n          >\r\n            {isFirebaseConfigured() ? (\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <CheckCircle size={16} />\r\n                Firebase已配置，支持云端存储\r\n              </Box>\r\n            ) : (\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <AlertCircle size={16} />\r\n                Firebase未配置，仅支持本地存储\r\n              </Box>\r\n            )}\r\n          </Alert>\r\n        </Box>\r\n\r\n        {/* 连接状态和操作按钮 */}\r\n        <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\" useFlexGap>\r\n          {!isFirebaseConfigured() && (\r\n            <Alert severity=\"info\" sx={{ width: '100%', fontSize: '0.8rem' }}>\r\n              要启用云端存储，请配置Firebase。查看README文档了解详细步骤。\r\n            </Alert>\r\n          )}\r\n          \r\n          {isFirebaseConfigured() && !storageStatus.cloudAvailable && (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Cloud size={16} />}\r\n              onClick={handleInitializeCloud}\r\n              disabled={syncing}\r\n              size=\"small\"\r\n            >\r\n              启用云端存储\r\n            </Button>\r\n          )}\r\n          \r\n          {storageStatus.cloudAvailable && (\r\n            <>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<RefreshCw size={16} />}\r\n                onClick={handleManualSync}\r\n                disabled={syncing}\r\n                size=\"small\"\r\n              >\r\n                手动同步\r\n              </Button>\r\n              \r\n              {storageStatus.mode === 'local' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<Cloud size={16} />}\r\n                  onClick={() => handleModeSwitch(STORAGE_MODES.HYBRID)}\r\n                  size=\"small\"\r\n                >\r\n                  切换到混合模式\r\n                </Button>\r\n              )}\r\n            </>\r\n          )}\r\n          \r\n          {!storageStatus.cloudAvailable && isFirebaseConfigured() && (\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<Wifi size={16} />}\r\n              onClick={handleReconnect}\r\n              disabled={syncing}\r\n              size=\"small\"\r\n            >\r\n              重新连接\r\n            </Button>\r\n          )}\r\n        </Stack>\r\n\r\n        {/* 同步信息 */}\r\n        {storageStatus.lastSync && (\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n            上次同步: {new Date(storageStatus.lastSync).toLocaleString()}\r\n          </Typography>\r\n        )}\r\n\r\n        {/* 状态消息 */}\r\n        {syncMessage && (\r\n          <Alert \r\n            severity={syncMessage.type} \r\n            sx={{ mt: 2 }}\r\n            onClose={() => setSyncMessage(null)}\r\n          >\r\n            {syncMessage.message}\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n\r\n      {/* 配置对话框 */}\r\n      <Dialog open={showConfig} onClose={() => setShowConfig(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>云端存储配置</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={3} sx={{ pt: 1 }}>\r\n            {/* 存储模式选择 */}\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" gutterBottom>存储模式</Typography>\r\n              <Stack direction=\"row\" spacing={1}>\r\n                {Object.values(STORAGE_MODES).map((mode) => (\r\n                  <Button\r\n                    key={mode}\r\n                    variant={storageStatus.mode === mode ? 'contained' : 'outlined'}\r\n                    onClick={() => handleModeSwitch(mode)}\r\n                    disabled={mode === 'cloud' && !storageStatus.cloudAvailable}\r\n                    size=\"small\"\r\n                  >\r\n                    {getModeLabel(mode)}\r\n                  </Button>\r\n                ))}\r\n              </Stack>\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            {/* 自动同步设置 */}\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={autoSync}\r\n                  onChange={(e) => setAutoSync(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"自动同步 (每5分钟)\"\r\n            />\r\n\r\n            {/* 存储状态信息 */}\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" gutterBottom>存储状态</Typography>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n                <Typography variant=\"body2\">模式:</Typography>\r\n                <Chip label={getModeLabel(storageStatus.mode)} size=\"small\" />\r\n              </Box>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n                <Typography variant=\"body2\">云端可用:</Typography>\r\n                {storageStatus.cloudAvailable ? \r\n                  <CheckCircle size={16} color=\"green\" /> : \r\n                  <CloudOff size={16} color=\"gray\" />\r\n                }\r\n              </Box>\r\n              {storageStatus.syncing && (\r\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  <Typography variant=\"body2\">正在同步...</Typography>\r\n                  <LinearProgress sx={{ width: 100 }} />\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowConfig(false)}>关闭</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CloudStorageManager; "],"names":["firebaseConfig","apiKey","process","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","initializeApp","db","getFirestore","auth","getAuth","isFirebaseConfigured","currentUserId","initializeAuth","Promise","resolve","reject","onAuthStateChanged","async","user","uid","localStorage","setItem","userCredential","signInAnonymously","error","console","Error","getUserId","storedUserId","getItem","saveCloudDiary","userId","diaryData","entry","timestamp","Date","now","createdAt","Timestamp","updatedAt","docRef","addDoc","collection","savedEntry","id","log","syncLocalToCloud","localEntries","JSON","parse","cloudEntries","q","query","where","orderBy","limit","querySnapshot","getDocs","entries","forEach","doc","data","push","title","content","mood","weather","length","getCloudDiaries","cloudIds","Set","map","success","failed","localEntry","has","checkCloudConnection","storageStatus","mode","cloudAvailable","lastSync","syncing","unsubscribeCloudListener","initializeHybridStorage","performInitialSync","authError","syncResult","manualSyncToCloud","result","getStorageStatus","switchStorageMode","startCloudListener","stopCloudListener","callback","onSnapshot","subscribeToCloudDiaries","window","dispatchEvent","CustomEvent","detail","reinitializeCloud","STORAGE_MODES","LOCAL","CLOUD","HYBRID","_ref","onStorageChange","setStorageStatus","useState","setSyncing","showConfig","setShowConfig","syncMessage","setSyncMessage","autoSync","setAutoSync","updateStorageStatus","handleModeSwitch","type","message","getModeLabel","useEffect","interval","setInterval","clearInterval","timer","setTimeout","clearTimeout","_jsxs","Card","elevation","sx","mb","children","CardContent","Box","display","alignItems","justifyContent","gap","_jsx","Cloud","size","Database","CloudOff","Typography","variant","fontWeight","Chip","label","color","LinearProgress","width","IconButton","onClick","Settings","Alert","severity","fontSize","CheckCircle","AlertCircle","Stack","direction","spacing","flexWrap","useFlexGap","Button","startIcon","disabled","_Fragment","RefreshCw","Wifi","mt","toLocaleString","onClose","Dialog","open","maxWidth","fullWidth","DialogTitle","DialogContent","pt","gutterBottom","Object","values","Divider","FormControlLabel","control","Switch","checked","onChange","e","target","DialogActions"],"sourceRoot":""}